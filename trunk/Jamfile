# This Jamfile requires boost-build v2 to build.
# The version shipped with boost 1.34.0

import modules ;
import os ;
import errors ;
import feature : feature ;

BOOST_ROOT = [ modules.peek : BOOST_ROOT ] ;

ECHO "BOOST_ROOT =" $(BOOST_ROOT) ;
ECHO "OS =" [ os.name ] ;

if ! $(BOOST_ROOT)
{
    errors.user-error
        "BOOST_ROOT must be set to your boost installation path." ;
}

use-project /boost : $(BOOST_ROOT) ;

# rule for linking the correct library when using openssl
rule link-openssl ( properties * )
{
	local result ;

	if <openssl>sha-1 in $(properties) || <openssl>pe in $(properties)
	{
		if [ os.name ] = NT
		{
			result += <library>ssleay <library>libeay ;
		}
		else
		{
			result += <library>crypto ;
		}
	}

	return $(result) ;
}

# rule for adding the right source files when using openssl and/or PE
rule use-openssl ( properties * )
{
	local result ;

	if <openssl>off in $(properties)
	{
		result += <source>src/sha1.cpp ;
	}
	else
	{
		if <openssl>pe in $(properties)
		{
			result += <source>src/pe_crypto.cpp ;
		}
	}

	return $(result) ;
}

feature logging : none default verbose : composite propagated symmetric link-incompatible ;
feature.compose <logging>default : <define>TORRENT_LOGGING ;
feature.compose <logging>verbose : <define>TORRENT_VERBOSE_LOGGING ;

feature dht-support : on off logging : composite propagated symmetric link-incompatible ;
feature.compose <dht-support>off : <define>TORRENT_DISABLE_DHT ;
feature.compose <dht-support>logging : <define>TORRENT_DHT_VERBOSE_LOGGING ;

feature openssl : pe sha-1 off : composite propagated symmetric link-incompatible ;
feature.compose <openssl>pe : <define>TORRENT_USE_OPENSSL ;
feature.compose <openssl>sha-1 : <define>TORRENT_USE_OPENSSL <define>TORRENT_DISABLE_ENCRYPTION ;
feature.compose <openssl>off : <define>TORRENT_DISABLE_ENCRYPTION ;

feature resolve-countries : on off : composite propagated symmetric link-incompatible ;
feature.compose <resolve-countries>off : <define>TORRENT_DISABLE_RESOLVE_COUNTRIES ;

feature character-set : ansi unicode : composite propagated link-incompatible ;
feature.compose <character-set>unicode : <define>_UNICODE <define>UNICODE ;

feature zlib : shipped system : composite propagated link-incompatible ;
feature.compose <zlib>shipped : ;
feature.compose <zlib>system : ;

feature statistics : off on : composite propagated symmetric link-incompatible ;
feature.compose <statistics>on : <define>TORRENT_STATS ;

feature upnp-logging : off on : composite propagated link-incompatible ;
feature.compose <upnp-logging>on : <define>TORRENT_UPNP_LOGGING ;

lib ssleay : : <name>ssleay32 ;
lib libeay : : <name>libeay32 ;
lib crypto : : <name>crypto ;
lib zlib-target : : <name>z ;

SOURCES =
	allocate_resources
	alert
	bandwidth_manager
	connection_queue
	entry
	escape_string
	http_connection
	http_stream
	identify_client
	ip_filter
	peer_connection
	bt_peer_connection
	web_peer_connection
	instantiate_connection
	natpmp
	piece_picker
	policy
	session
	session_impl
	socks4_stream
	socks5_stream
	stat
	storage
	torrent
	torrent_handle
	torrent_info
	tracker_manager
	http_tracker_connection
	udp_tracker_connection
	sha1
	metadata_transfer
	upnp
	ut_pex
	logger
	file_pool
	lsd
	disk_io_thread
	;

KADEMLIA_SOURCES =
	kademlia/closest_nodes
	kademlia/dht_tracker
	kademlia/node
	kademlia/refresh
	kademlia/rpc_manager
	kademlia/find_data
	kademlia/node_id
	kademlia/routing_table
	kademlia/traversal_algorithm
	;

ZLIB_SOURCES = 
	adler32
	compress
	crc32
	deflate
	gzio
	infback
	inffast
	inflate
	inftrees
	trees
	uncompr
	zutil
	;

local defines ;
local libs ;

if [ os.name ] = CYGWIN || [ os.name ] = NT
{
	lib wsock32 : : <name>wsock32 ;
	lib ws2_32 : : <name>ws2_32 ;
	libs += ws2_32 wsock32 ;
	defines += WIN32_LEAN_AND_MEAN ;
	defines += _WIN32_WINNT=0x0500 ;
	defines += __USE_W32_SOCKETS ;
	defines += WIN32 ;
	defines += _WIN32 ;
	SOURCES += file_win ;
}
else
{
	SOURCES += file ;
}

local usage-requirements = 
	<include>./include
	<include>./include/libtorrent
	<zlib>shipped:<include>./zlib
	<include>$(BOOST_ROOT)
	<variant>release:<define>NDEBUG
	<define>BOOST_ALL_NO_LIB
	<define>_FILE_OFFSET_BITS=64
	<define>$(defines)
	<library>/boost/thread//boost_thread #/<link>static
	<library>/boost/filesystem//boost_filesystem #/<link>static
	<conditional>@link-openssl
	<zlib>system:<library>zlib-target
# these compiler settings just makes the compiler standard conforming
	<toolset>msvc:<cxxflags>/Zc:wchar_t
	<toolset>msvc:<cxxflags>/Zc:forScope
# disable bogus deprecation warnings on msvc8
	<toolset>msvc:<define>_SCL_SECURE_NO_DEPRECATE
	<toolset>msvc:<define>_CRT_SECURE_NO_DEPRECATE
	;

lib torrent

	: # sources
	src/$(SOURCES).cpp
	$(libs)

	: # requirements
	<define>BOOST_THREAD_USE_LIB
	<threading>multi
	<link>shared:<define>TORRENT_BUILDING_SHARED
	<dht-support>on:<source>src/$(KADEMLIA_SOURCES).cpp
	<dht-support>logging:<source>src/$(KADEMLIA_SOURCES).cpp
	<zlib>shipped:<source>zlib/$(ZLIB_SOURCES).c
	<conditional>@use-openssl
	$(usage-requirements)

	: # default build
	<link>static

	: # usage requirements
	$(usage-requirements)
	;

