name: cibuildwheel

# Note: We use a dynamic matrix to build different sets of wheels under
# different conditions. On workflow_dispatch, we build the full suite of
# wheels. This takes hours, so on pull_request, we just build a representative
# sample.

# The full list of cibuildwheel's build targets can be found here:
# https://github.com/pypa/cibuildwheel/blob/v2.2.0a1/cibuildwheel/resources/build-platforms.toml

# Notes on build targets we (don't) support:
# - pypy: libtorrent doesn't build with pypy as of writing
# - macos_arm64: can be cross-compiled from x86_64, but not run, so can't be
#   tested. Build output indicates it isn't building correctly
# - macos_universal2: b2 / setup.py doesn't have a straightforward way to build
#   this as of writing
# - abi3: Not supported by boost-python (or pybind11) or cibuildwheel as of
#   writing

on:
  workflow_dispatch:
    inputs:
      publish:
        description: Write 'PUBLISH' to publish to pypi. BEWARE! ARTIFACTS ARE IMMUTABLE AND CANNOT BE REPLACED ONCE PUBLISHED!
      publish_test:
        description: Write 'PUBLISH_TEST' to publish to test-pypi. BEWARE! ARTIFACTS ARE IMMUTABLE AND CANNOT BE REPLACED ONCE PUBLISHED!

  pull_request:
    paths:
      - .github/workflows/cibuildwheel.yml
      - tools/cibuildwheel/**

jobs:
  configure_matrix:
    runs-on: ubuntu-latest
    env:
      # github actions syntax doesn't allow us to have yaml structures as
      # an input to a job. The following is a json-encoded environment variable.
      MATRIX: |
        {
          "include": [
            {"os": "ubuntu-20.04", "build": "cp36-manylinux_x86_64", "run_on_pull_request": true},
            {"os": "ubuntu-20.04", "build": "cp36-manylinux_i686"},
            {"os": "ubuntu-20.04", "build": "cp36-manylinux_aarch64"},
            {"os": "ubuntu-20.04", "build": "cp36-manylinux_ppc64le"},
            {"os": "ubuntu-20.04", "build": "cp36-manylinux_s390x"},

            {"os": "ubuntu-20.04", "build": "cp37-manylinux_x86_64"},
            {"os": "ubuntu-20.04", "build": "cp37-manylinux_i686"},
            {"os": "ubuntu-20.04", "build": "cp37-manylinux_aarch64"},
            {"os": "ubuntu-20.04", "build": "cp37-manylinux_ppc64le"},
            {"os": "ubuntu-20.04", "build": "cp37-manylinux_s390x"},

            {"os": "ubuntu-20.04", "build": "cp38-manylinux_x86_64"},
            {"os": "ubuntu-20.04", "build": "cp38-manylinux_i686"},
            {"os": "ubuntu-20.04", "build": "cp38-manylinux_aarch64"},
            {"os": "ubuntu-20.04", "build": "cp38-manylinux_ppc64le"},
            {"os": "ubuntu-20.04", "build": "cp38-manylinux_s390x"},

            {"os": "ubuntu-20.04", "build": "cp39-manylinux_x86_64"},
            {"os": "ubuntu-20.04", "build": "cp39-manylinux_i686"},
            {"os": "ubuntu-20.04", "build": "cp39-manylinux_aarch64"},
            {"os": "ubuntu-20.04", "build": "cp39-manylinux_ppc64le"},
            {"os": "ubuntu-20.04", "build": "cp39-manylinux_s390x"},

            {"os": "ubuntu-20.04", "build": "cp310-manylinux_x86_64"},
            {"os": "ubuntu-20.04", "build": "cp310-manylinux_i686"},
            {"os": "ubuntu-20.04", "build": "cp310-manylinux_aarch64"},
            {"os": "ubuntu-20.04", "build": "cp310-manylinux_ppc64le"},
            {"os": "ubuntu-20.04", "build": "cp310-manylinux_s390x"},

            {"os": "ubuntu-20.04", "build": "cp36-musllinux_x86_64", "run_on_pull_request": true},
            {"os": "ubuntu-20.04", "build": "cp36-musllinux_i686"},
            {"os": "ubuntu-20.04", "build": "cp36-musllinux_aarch64"},
            {"os": "ubuntu-20.04", "build": "cp36-musllinux_ppc64le"},
            {"os": "ubuntu-20.04", "build": "cp36-musllinux_s390x"},

            {"os": "ubuntu-20.04", "build": "cp37-musllinux_x86_64"},
            {"os": "ubuntu-20.04", "build": "cp37-musllinux_i686"},
            {"os": "ubuntu-20.04", "build": "cp37-musllinux_aarch64"},
            {"os": "ubuntu-20.04", "build": "cp37-musllinux_ppc64le"},
            {"os": "ubuntu-20.04", "build": "cp37-musllinux_s390x"},

            {"os": "ubuntu-20.04", "build": "cp38-musllinux_x86_64"},
            {"os": "ubuntu-20.04", "build": "cp38-musllinux_i686"},
            {"os": "ubuntu-20.04", "build": "cp38-musllinux_aarch64"},
            {"os": "ubuntu-20.04", "build": "cp38-musllinux_ppc64le"},
            {"os": "ubuntu-20.04", "build": "cp38-musllinux_s390x"},

            {"os": "ubuntu-20.04", "build": "cp39-musllinux_x86_64"},
            {"os": "ubuntu-20.04", "build": "cp39-musllinux_i686"},
            {"os": "ubuntu-20.04", "build": "cp39-musllinux_aarch64"},
            {"os": "ubuntu-20.04", "build": "cp39-musllinux_ppc64le"},
            {"os": "ubuntu-20.04", "build": "cp39-musllinux_s390x"},

            {"os": "ubuntu-20.04", "build": "cp310-musllinux_x86_64"},
            {"os": "ubuntu-20.04", "build": "cp310-musllinux_i686"},
            {"os": "ubuntu-20.04", "build": "cp310-musllinux_aarch64"},
            {"os": "ubuntu-20.04", "build": "cp310-musllinux_ppc64le"},
            {"os": "ubuntu-20.04", "build": "cp310-musllinux_s390x"},

            {"os": "macos-10.15", "build": "cp36-macos_x86_64", "run_on_pull_request": true},
            {"os": "macos-10.15", "build": "cp37-macos_x86_64"},
            {"os": "macos-10.15", "build": "cp38-macos_x86_64"},
            {"os": "macos-10.15", "build": "cp39-macos_x86_64"},
            {"os": "macos-10.15", "build": "cp310-macos_x86_64"},

            {"os": "windows-2019", "build": "cp36-win64_amd", "run_on_pull_request": true},
            {"os": "windows-2019", "build": "cp36-win32"},

            {"os": "windows-2019", "build": "cp37-win64_amd"},
            {"os": "windows-2019", "build": "cp37-win32"},

            {"os": "windows-2019", "build": "cp38-win64_amd"},
            {"os": "windows-2019", "build": "cp38-win32"},

            {"os": "windows-2019", "build": "cp39-win64_amd"},
            {"os": "windows-2019", "build": "cp39-win32"},

            {"os": "windows-2019", "build": "cp310-win64_amd"},
            {"os": "windows-2019", "build": "cp310-win32"}
          ]
        }

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
    - id: set-matrix
      run: |
        if [ $GITHUB_EVENT_NAME == "pull_request" ]; then
        MATRIX=$(echo $MATRIX | jq -c '{"include": .include | [.[] | select(.run_on_pull_request?) | del(.run_on_pull_request)]}')
        else
        MATRIX=$(echo $MATRIX | jq -c '{"include": .include | [.[] | del(.run_on_pull_request)]}')
        fi
        echo ::set-output name=matrix::$MATRIX

  build_wheels:
    needs: configure_matrix
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.configure_matrix.outputs.matrix) }}

    env:
      CIBW_BUILD_VERBOSITY: 1
      CIBW_BUILD: ${{ matrix.build }}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - uses: actions/cache@v2
      id: cache-wheel
      with:
        path: wheelhouse
        key: wheel-${{ matrix.build }}-${{ github.sha }}

    - uses: docker/setup-qemu-action@v1
      if: steps.cache-wheel.outputs.cache-hit != 'true'

    - uses: actions/setup-python@v2
      if: steps.cache-wheel.outputs.cache-hit != 'true'

    - name: build native wheels
      if: steps.cache-wheel.outputs.cache-hit != 'true'
      run: |
        python -m pip install cibuildwheel==2.2.0a1
        python tools/cibuildwheel/run_cibuildwheel.py --output-dir wheelhouse

    - uses: actions/upload-artifact@v2
      with:
        path: wheelhouse/*.whl
        name: wheels

  upload_pypi:
    needs: build_wheels
    runs-on: ubuntu-latest
    if: needs.build_wheels.result == 'success' && github.event.inputs.publish == 'PUBLISH'

    steps:
    - uses: actions/download-artifact@v2
      with:
        name: wheels
        path: wheelhouse

    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: wheelhouse
        skip_existing: true

  upload_pypi_test:
    needs: build_wheels
    runs-on: ubuntu-latest
    if: needs.build_wheels.result == 'success' && github.event.inputs.publish_test == 'PUBLISH_TEST'

    steps:
    - uses: actions/download-artifact@v2
      with:
        name: wheels
        path: wheelhouse

    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        packages_dir: wheelhouse
        skip_existing: true
        repository_url: https://test.pypi.org/legacy/
