name: Windows

on:
   push:
      branches: [ RC_1_2 RC_2_0 master ]
   pull_request:

defaults:
   run:
      shell: cmd

jobs:

   tests:
      name: Test
      runs-on: windows-2019
      continue-on-error: true

      steps:
      - name: checkout
        uses: actions/checkout@v2.3.3
        with:
           submodules: recursive

      # there appears to be a bug in boost-build where referring to a
      # dependency that's on a different drive fails, deep in boost-build
      # while concatenating paths
      - name: setup boost
        run: |
          echo using msvc ; >%HOMEDRIVE%%HOMEPATH%\user-config.jam
          mklink /J boost %BOOST_ROOT_1_72_0%
          cd boost
          b2 headers

      - name: tests
        run: |
          set BOOST_ROOT=%CD%\boost
          set PATH=%BOOST_ROOT%;%PATH%
          set PYTHON_INTERPRETER=python
          cd test
          b2 -j %NUMBER_OF_PROCESSORS% -l400 warnings=all warnings-as-errors=on

   simulations:
      name: Sims
      runs-on: windows-2019
      continue-on-error: true

      steps:
      - name: checkout
        uses: actions/checkout@v2.3.3
        with:
           submodules: true

      # there appears to be a bug in boost-build where referring to a
      # dependency that's on a different drive fails, deep in boost-build
      # while concatenating paths
      - name: setup boost
        run: |
          echo using msvc ; >%HOMEDRIVE%%HOMEPATH%\user-config.jam
          mklink /J boost %BOOST_ROOT_1_72_0%
          cd boost
          b2 headers

  # debug iterators are turned off here because msvc has issues with noexcept
  # specifiers when debug iterators are enabled. Specifically, constructors that
  # allocate memory are still marked as noexcept. That results in program
  # termination
  # the IOCP backend in asio appears to have an issue where it hangs under
  # certain unexpected terminations (through exceptions)
      - name: simulations
        run: |
          set BOOST_ROOT=%CD%\boost
          set PATH=%BOOST_ROOT%;%PATH%
          cd simulation
          b2 --abbreviate-paths -j %NUMBER_OF_PROCESSORS% -l400 link=static debug-iterators=off picker-debugging=on invariant-checks=full crypto=built-in define=BOOST_ASIO_DISABLE_IOCP asserts=on

   build:
      name: Build
      runs-on: ${{ matrix.os }}
      continue-on-error: true

      strategy:
         matrix:
           os: [ windows-2019, windows-2016 ]
           config: [ asio-debugging=on picker-debugging=on, mmap-disk-io=off ]

      steps:
      - name: checkout
        uses: actions/checkout@v2.3.3
        with:
           submodules: recursive

      # there appears to be a bug in boost-build where referring to a
      # dependency that's on a different drive fails, deep in boost-build
      # while concatenating paths
      - name: setup boost
        run: |
          echo using msvc ; >%HOMEDRIVE%%HOMEPATH%\user-config.jam
          mklink /J boost %BOOST_ROOT_1_72_0%
          cd boost
          b2 headers

      - name: build library
        run: |
          set BOOST_ROOT=%CD%\boost
          set PATH=%BOOST_ROOT%;%PATH%
          b2 -j %NUMBER_OF_PROCESSORS% ${{ matrix.config }} cxxstd=14 warnings=all warnings-as-errors=on

      - name: build examples
        run: |
          set BOOST_ROOT=%CD%\boost
          set PATH=%BOOST_ROOT%;%PATH%
          cd examples
          b2 -j %NUMBER_OF_PROCESSORS% ${{ matrix.config }} warnings=all warnings-as-errors=on

      - name: build tools
        run: |
          set BOOST_ROOT=%CD%\boost
          set PATH=%BOOST_ROOT%;%PATH%
          cd tools
          b2 -j %NUMBER_OF_PROCESSORS% ${{ matrix.config }} warnings=all warnings-as-errors=on

