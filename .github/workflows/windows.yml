name: Windows

on:
   push:
      branches: [ RC_1_2 RC_2_0 master ]
   pull_request:

defaults:
   run:
      shell: cmd

jobs:

   tests:
      name: Test
      runs-on: windows-2019
      continue-on-error: true

      strategy:
         matrix:
           include:
             - config: address-model=32
             - config: address-model=64 crypto=openssl openssl-lib=vcpkg\installed\x64-windows\lib\ openssl-include=vcpkg\installed\x64-windows\include
             - config: release

      steps:
      - name: checkout
        uses: actions/checkout@v2.3.3
        with:
           submodules: true

      # we only build with openssl on 64 bit. The github action images comes
      # with openssl pre-installed, but only the 64 bit version and there's no
      # naming convention to separate the two. When building the 32 bit version
      # it appears it still picks up the 64 bit DLL, and fails.
      - name: install openssl (64 bit)
        if: ${{ contains(matrix.config, 'crypto=openssl') }}
        uses: lukka/run-vcpkg@v6
        with:
          vcpkgArguments: 'openssl'
          vcpkgTriplet: 'x64-windows'
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: 0bf3923f9fab4001c00f0f429682a0853b5749e0

      # there appears to be a bug in boost-build where referring to a
      # dependency that's on a different drive fails, deep in boost-build
      # while concatenating paths
      - name: setup boost
        run: |
          echo using msvc ; >%HOMEDRIVE%%HOMEPATH%\user-config.jam
          mklink /J boost %BOOST_ROOT_1_72_0%
          cd boost
          b2 headers

      - name: tests (deterministic)
        run: |
          set BOOST_ROOT=%CD%\boost
          set PATH=%BOOST_ROOT%;%PATH%
          set PYTHON_INTERPRETER=python
          cd test
          b2 -l400 warnings=all warnings-as-errors=on ${{ matrix.config }} deterministic-tests


      - name: tests (flaky)
        run: |
          set BOOST_ROOT=%CD%\boost
          set PATH=%BOOST_ROOT%;%PATH%
          set PYTHON_INTERPRETER=python
          cd test
          set c=3
          :retry
          if %c%==0 exit /B 1
          set /a c = %c% -1
          b2 -l400 warnings=all warnings-as-errors=on ${{ matrix.config }}
          if %errorlevel%==0 exit /B 0
          if %c% gtr 0 goto retry
          exit /B 1

   simulations:
      name: Simulations
      runs-on: windows-2019

      steps:
      - name: checkout
        uses: actions/checkout@v2.3.3
        with:
           submodules: true

      # there appears to be a bug in boost-build where referring to a
      # dependency that's on a different drive fails, deep in boost-build
      # while concatenating paths
      - name: setup boost
        run: |
          echo using msvc ; >%HOMEDRIVE%%HOMEPATH%\user-config.jam
          mklink /J boost %BOOST_ROOT_1_72_0%
          cd boost
          b2 headers

  # debug iterators are turned off here because msvc has issues with noexcept
  # specifiers when debug iterators are enabled. Specifically, constructors that
  # allocate memory are still marked as noexcept. That results in program
  # termination
  # the IOCP backend in asio appears to have an issue where it hangs under
  # certain unexpected terminations (through exceptions)
      - name: build sims
        run: |
          set BOOST_ROOT=%CD%\boost
          set PATH=%BOOST_ROOT%;%PATH%
          cd simulation
          b2 --hash address-model=64 link=static debug-iterators=off invariant-checks=on crypto=built-in define=BOOST_ASIO_DISABLE_IOCP asserts=on testing.execute=off

      - name: run sims
        run: |
          set BOOST_ROOT=%CD%\boost
          set PATH=%BOOST_ROOT%;%PATH%
          cd simulation
          b2 --hash -l350 address-model=64 link=static debug-iterators=off invariant-checks=on crypto=built-in define=BOOST_ASIO_DISABLE_IOCP asserts=on

   build:
      name: Build
      runs-on: windows-2019
      continue-on-error: true

      strategy:
         matrix:
           include:
             - config: asio-debugging=on picker-debugging=on windows-version=vista
             - config: windows-api=store windows-version=win10
             - config: deprecated-functions=off

      steps:
      - name: checkout
        uses: actions/checkout@v2.3.3
        with:
           submodules: true

      # there appears to be a bug in boost-build where referring to a
      # dependency that's on a different drive fails, deep in boost-build
      # while concatenating paths
      - name: setup boost
        run: |
          echo using msvc ; >%HOMEDRIVE%%HOMEPATH%\user-config.jam
          mklink /J boost %BOOST_ROOT_1_72_0%
          cd boost
          b2 headers

      - name: build library
        run: |
          set BOOST_ROOT=%CD%\boost
          set PATH=%BOOST_ROOT%;%PATH%
          b2 ${{ matrix.config }} cxxstd=14 warnings=all warnings-as-errors=on

      - name: build examples
        if: ${{ ! contains(matrix.config, 'windows-api=store') }}
        run: |
          set BOOST_ROOT=%CD%\boost
          set PATH=%BOOST_ROOT%;%PATH%
          cd examples
          b2 ${{ matrix.config }} warnings=all warnings-as-errors=on

      - name: build tools
        if: ${{ ! contains(matrix.config, 'windows-api=store') }}
        run: |
          set BOOST_ROOT=%CD%\boost
          set PATH=%BOOST_ROOT%;%PATH%
          cd tools
          b2 ${{ matrix.config }} warnings=all warnings-as-errors=on

