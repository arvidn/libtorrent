name: Linux

on:
   push:
      branches: [ RC_1_2 RC_2_0 master ]
   pull_request:

jobs:

   build:
      name: build
      runs-on: ubuntu-20.04
      continue-on-error: true

      strategy:
         matrix:
            config: [ asio-debugging=on picker-debugging=on, extensions=off logging=off streaming=off super-seeding=off share-mode=off predictive-pieces=off dht=off alert-msg=off encryption=off mutable-torrents=off deprecated-functions=off, crypto=gcrypt, mmap-disk-io=off ]

      steps:
      - name: checkout
        uses: actions/checkout@v2.3.3
        with:
           submodules: true

      - name: update package lists
        continue-on-error: true
        run: |
          sudo apt update

      - name: install boost
        run: |
          sudo apt install libboost-tools-dev libboost-dev libboost-system-dev
          echo "using gcc ;" >>~/user-config.jam

      - name: install gcrypt
        if: ${{ contains(matrix.config, 'crypto=gcrypt') }}
        run: sudo apt install libgcrypt20-dev

      - name: build library
        run: |
          b2 ${{ matrix.config }} cxxstd=14

      - name: build examples
        run: |
          cd examples
          b2 ${{ matrix.config }}

      - name: build tools
        run: |
          cd tools
          b2 ${{ matrix.config }} warnings-as-errors=on



   fuzzers:
      name: Fuzzers
      runs-on: ubuntu-20.04
      continue-on-error: true

      steps:
      - name: checkout
        uses: actions/checkout@v2.3.3
        with:
           submodules: true

      - name: update package lists
        continue-on-error: true
        run: |
          sudo apt update

      - name: install boost
        run: |
          sudo apt install libboost-tools-dev libboost-dev libboost-system-dev
          echo "using clang : 9 : clang++-9 ;" >>~/user-config.jam

      - name: build fuzzers
        run: |
          cd fuzzers
          b2 clang cxxstd=14 warnings-as-errors=on



   check_headers:
      name: check headers
      runs-on: ubuntu-20.04

      steps:
      - name: checkout
        uses: actions/checkout@v2.3.3
        with:
           submodules: true

      - name: update package lists
        continue-on-error: true
        run: |
          sudo apt update

      - name: install boost
        run: |
          sudo apt install libboost-tools-dev libboost-dev libboost-system-dev
          echo "using gcc ;" >>~/user-config.jam

      - name: compile header files individually
        run: |
          b2 check-headers cxxstd=14 warnings-as-errors=on



   clang_tidy:
      name: clang-tidy
      runs-on: ubuntu-20.04

      steps:
      - name: checkout
        uses: actions/checkout@v2.3.3
        with:
           submodules: true

      - name: update package lists
        continue-on-error: true
        run: |
          sudo apt update

      - name: install clang-tidy
        run: sudo apt install clang-tidy

      - name: install boost
        run: |
          sudo apt install libboost-tools-dev libboost-dev
          echo "using clang_tidy : : clang-tidy \"-checks=-clang-analyzer-core.*,-clang-analyzer-unix.*\" : <cxxflags>-std=c++14 <cxxflags>-I/usr/local/clang-7.0.0/include/c++/v1 <cxxflags>-stdlib=libc++ <linkflags>-stdlib=libc++ ;" >> ~/user-config.jam;

      - name: analyze
        run: |
          b2 -a clang_tidy



   test:
      name: Tests
      runs-on: ubuntu-20.04
      continue-on-error: true

      strategy:
         matrix:
            include:
               - config: address-sanitizer=norecover undefined-sanitizer=norecover crypto=openssl
               - config: toolset=clang address-sanitizer=norecover undefined-sanitizer=norecover
               - config: thread-sanitizer=norecover crypto=openssl release debug-symbols=on
               - config: crypto=gnutls
               - config: deprecated-functions=off

      steps:
      - name: checkout
        uses: actions/checkout@v2.3.3
        with:
           submodules: true

      - name: update package lists
        continue-on-error: true
        run: |
          sudo apt update

      - name: install gnutls
        if: ${{ contains(matrix.config, 'crypto=gnutls') }}
        run: |
          sudo apt install libgnutls28-dev

      - name: install boost
        run: |
          sudo apt install libboost-tools-dev libboost-dev libboost-system-dev
          echo "using gcc ;" >>~/user-config.jam
          echo "using clang : 9 : clang++-9 ;" >>~/user-config.jam

      - name: build and run tests
        run: |
          cd test
          b2 ${{ matrix.config }} -l400 warnings-as-errors=on debug-iterators=on invariant-checks=full asserts=on deterministic-tests

      - name: run tests (flaky)
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 30
          retry_wait_seconds: 4
          max_attempts: 3
          command: (cd test; b2 ${{ matrix.config }} -l400 warnings-as-errors=on debug-iterators=on invariant-checks=full asserts=on)



   sim:
      name: Simulations
      runs-on: ubuntu-20.04

      steps:
      - name: checkout
        uses: actions/checkout@v2.3.3
        with:
           submodules: true

      - name: update package lists
        continue-on-error: true
        run: |
          sudo apt update

      - name: install boost
        run: |
          sudo apt install libboost-tools-dev libboost-dev libboost-system-dev
          echo "using gcc ;" >>~/user-config.jam

      - name: build and run simulations
        run: |
          cd simulation
          b2 debug-iterators=on invariant-checks=full asserts=on picker-debugging=on


   dist:
      name: build dist
      runs-on: ${{ matrix.os }}

      strategy:
         matrix:
            os: [ubuntu-20.04 ]

      steps:
      - name: checkout
        uses: actions/checkout@v2.3.3
        with:
           submodules: true

      - name: update package lists
        continue-on-error: true
        run: |
          sudo apt update

      - name: install dependencies
        run: |
          sudo apt install libboost-tools-dev libboost-python-dev libboost-dev libboost-system-dev
          sudo apt install python-docutils python-pygments python-pil gsfonts inkscape icoutils graphviz hunspell imagemagick python3-setuptools
          python3 -m pip install aafigure
          echo "using gcc ;" >>~/user-config.jam

      - name: build tarball
        run: AAFIGURE=~/.local/bin/aafigure RST2HTML=rst2html make dist

      - uses: actions/upload-artifact@v2
        with:
          name: tarball
          path: libtorrent-rasterbar-*.tar.gz

      - name: test-tarball (b2 install)
        run: |
          tar xvzf libtorrent-rasterbar-*.tar.gz
          cd libtorrent-rasterbar-*/
          b2 install cxxstd=14 --prefix=test-install-root
          cat test-install-root/share/pkgconfig/libtorrent-rasterbar.pc

      - name: test-tarball (b2 tests)
        run: |
          cd libtorrent-rasterbar-*/test
          b2 testing.execute=off
          b2 test_torrent_info

      - name: test-tarball (python bindings)
        run: |
          cd libtorrent-rasterbar-*/
          python3 bindings/python/setup.py build
